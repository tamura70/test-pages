Search.setIndex({"docnames": ["cspsat", "cspsat.csp", "cspsat.dpll", "cspsat.functions", "cspsat.hooks", "cspsat.sat", "cspsat.util", "index", "modules"], "filenames": ["cspsat.rst", "cspsat.csp.rst", "cspsat.dpll.rst", "cspsat.functions.rst", "cspsat.hooks.rst", "cspsat.sat.rst", "cspsat.util.rst", "index.rst", "modules.rst"], "titles": ["cspsat package", "cspsat.csp module", "cspsat.dpll module", "cspsat.functions module", "cspsat.hooks module", "cspsat.sat module", "cspsat.util module", "cspsat\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8", "cspsat"], "terms": {".csp": [0, 3, 6, 8], "solver": [0, 1, 3, 5, 8], ".model": [0, 5], ".stats": 0, ".minimize": 0, ".maximize": 0, ".add": [0, 1, 5], "()": [0, 1, 3, 5, 6, 8], ".find": [0, 5], ".getstat": [0, 3, 5], ".solutions": [0, 3, 5], ".solve": [0, 3, 5], "encoder": [0, 1, 3, 4, 6, 8], ".defaultfunctionhooks": [0, 1], ".defaultconstrainthooks": [0, 1], ".delimeq": 0, ".delimge": 0, ".delimbit": 0, ".defint": [0, 6], ".variables": 0, ".intlb": 0, ".intub": 0, ".intrange": 0, ".wsumbound": 0, ".getbound": [0, 1], ".vareqk": 0, ".vartobool": [0, 1], ".encodeint": 0, ".isboollike": 0, ".encodewsumeq": 0, ".encodewsumne": 0, ".encodewsumle": 0, ".encode": [0, 1], ".put": [0, 1], ".decode": 0, ".tocnf": 0, ".getblock": 0, "directencoder": [0, 1, 3, 6, 8], "orderencoder": [0, 1, 3, 6, 8], ".vargek": 0, "logencoder": [0, 1, 3, 6, 8], ".varbitk": 0, ".getbools": 0, ".dpll": [0, 8], "dpll": [0, 2, 8], ".nvars": [0, 5], ".nclauses": [0, 5], ".tolit": 0, ".tovar": 0, ".value": 0, ".newvar": 0, ".decisionlevel": 0, ".enqueue": 0, ".assume": 0, ".propagateclause": 0, ".propagate": 0, ".cancel": [0, 5], ".canceluntil": 0, ".newdecision": 0, ".backtrack": 0, ".getmodel": 0, ".search": 0, ".info": 0, ".var": 0, "2repr": [0, 2], ".lit": 0, ".clause": 0, ".assigns": 0, ".decisions": 0, ".watches": 0, ".addinternalclause": 0, ".adddimacsclause": 0, ".todimacslit": 0, ".todimacslits": 0, ".addclause": 0, ".load": 0, ".functions": [0, 8], "variables": [0, 1, 3, 5, 6, 8], "assignments": [0, 3, 8], "value": [0, 2, 3, 6, 8], "truthtable": [0, 3, 8], "isvalid": [0, 3, 8], "issat": [0, 3, 8], "isequiv": [0, 3, 8], "models": [0, 3, 8], "tonf": [0, 3, 8], "tonnf": [0, 3, 8], "tocnf": [0, 1, 3, 6, 8], "todnf": [0, 3, 8], "ge": [0, 1, 3, 6, 8], "le": [0, 1, 3, 6, 8], "eq": [0, 3, 6, 8], "gek": [0, 3, 6, 8], "lek": [0, 3, 6, 8], "eqk": [0, 3, 6, 8], "statdata": [0, 3, 8], "status": [0, 3, 8], "defaulttimeout": [0, 3, 8], "gettimeout": [0, 3, 8], "settimeout": [0, 3, 8], "solutionssat": [0, 3, 8], "solvesat": [0, 3, 8], "solutionscsp": [0, 3, 8], "solvecsp": [0, 3, 8], "savesat": [0, 3, 8], "loadsat": [0, 3, 8], "savedimacs": [0, 3, 8], "savecsp": [0, 3, 8], "loadcsp": [0, 3, 8], ".hooks": [0, 1, 8], "defaultfunctionhook": [0, 1, 4, 8], "defaultconstrainthook": [0, 1, 4, 8], ".sat": [0, 3, 8], "sat": [0, 1, 3, 5, 6, 8], ".commitposition": 0, ".buffer": 0, ".buflimit": 0, ".defaultcommand": [0, 5], ".defaulttempdir": 0, ".defaultlimit": [0, 5], ".defaultmaxclauses": [0, 5], ".updatedimacsheader": 0, ".addblock": [0, 5], ".commit": [0, 5], ".util": [0, 8], "cspsatexception": [0, 1, 3, 5, 6, 8], "cspsattimeout": [0, 6, 8], "bool": [0, 1, 2, 3, 5, 6, 8], ".isaux": 0, "true": [0, 1, 2, 3, 5, 6, 8], "false": [0, 1, 2, 3, 5, 6, 8], "var": [0, 1, 2, 3, 6, 8], "wsum": [0, 1, 6, 8], ".wsum": 0, ".c": 0, ".coef": 0, ".isconstant": 0, ".where": 0, ".mul": 0, ".neg": 0, ".sub": 0, ".toexpr": [0, 6], "binary": [0, 6, 8], ".bins": 0, ".eqk": 0, ".nek": 0, ".gek": 0, ".gtk": 0, ".lek": 0, ".ltk": 0, ".eq": 0, ".ne": 0, ".ge": 0, ".gt": 0, ".le": 0, ".lt": 0, ".addnum": [0, 6], ".addmul": 0, ".addpower": [0, 6], ".issimpleseq": 0, ".tosimpleseq": 0, ".tobchain": 0, "binaryequation": [0, 6, 8], ".cmp": [0, 6], "seqcounter": [0, 6, 8], "preprocessor": [0, 6, 8], ".towsum": 0, ".isbc": 0, ".tobc": 0, ".toxcnf": 0, "\u30e2\u30b8\u30e5\u30fc\u30eb": [0, 1, 2, 3, 5, 6, 7], "\u5145\u8db3": [1, 3, 4, 6], "\u554f\u984c": [1, 2, 3, 4, 5, 6], "(csp": [1, 3], "\u7b26\u53f7": [1, 2, 3, 6], "\u4ee5\u4e0b": [1, 2, 3, 4, 5, 6], "\u30af\u30e9\u30b9": [1, 2, 3, 5, 6], "\u304b\u3089": [1, 2, 3, 5, 6], "\u306a\u308b": [1, 2, 3, 5, 6], "\u30bd\u30eb\u30d0\u30fc": [1, 2, 3, 5], "\u57fa\u5e95": 1, "\u76f4\u63a5": [1, 3], "\u652f\u6301": 1, "\u9806\u5e8f": [1, 3], "\u5bfe\u6570": 1, "\u8aac\u660e": 1, "..": [1, 4, 6], ".,": [1, 4, 6], "an": 1, "\uff0ex": 1, "xn": [1, 3, 4, 6], "\uff0cl": 1, "ln": 1, "\u30ea\u30c6\u30e9\u30eb": [1, 2, 3, 5, 6], "\u307e\u305f": [1, 4], "\u30c9\u30e1\u30a4\u30f3": [1, 6], "\u6574\u6570": [1, 3, 6], "\u5909\u6570": [1, 2, 5, 6], "\u8868\u3059": [1, 3, 6], "\u540d\u79f0": [1, 3], "\u306a\u3069": [1, 3, 5], "\u5099\u8003": 1, "\"int": 1, "\",": [1, 3, 4, 6], "lb": 1, "ub": 1, "\u6700\u5c0f\u5316": 1, "\"minimize": 1, "\u6700\u5927\u5316": 1, "\"maximize": 1, "\u30b3\u30e1\u30f3\u30c8": [1, 3, 5], "\"comment": 1, ".]": 1, ", [": [1, 3, 5], "\"#": 1, "\u5b9a\u6570": [1, 3, 5, 6], "\u6587\u5b57\u5217": [1, 3, 5, 6], "\u30aa\u30d7\u30b8\u30a7\u30af\u30c8": 1, "\u30de\u30a4\u30ca\u30b9": [1, 6], "\"-": 1, "x1": [1, 4, 6], "\u52a0\u7b97": 1, "\"+": 1, "\u6e1b\u7b97": 1, "x2": [1, 6], "\u4e57\u7b97": 1, "\"*": 1, "x1\u307e": 1, "\u9664\u7b97": 1, "\"div": [1, 4], "],": [1, 3, 4, 6], "\"/": [1, 3], "/\"": 1, ", x": 1, ".defaultfunctionhook": 1, "\u5b9a\u7fa9": [1, 6], "\u5270\u4f59": 1, "\"mod": [1, 4], "\"%": 1, "\u7d76\u5bfe\u5024": 1, "\"abs": [1, 4], "\u6700\u5c0f\u5024": 1, "\"min": [1, 4], "\u6700\u5927\u5024": 1, "\"max": [1, 4], "if\u5f0f": 1, "\"if": [1, 4], "\u30d3\u30c3\u30c8": [1, 6], "\"bit": [1, 4], "\u4ee5\u4e0a": [1, 3], "\u547d\u984c": [1, 2, 5, 6], "\u8ca0\u30ea\u30c6\u30e9\u30eb": [1, 2, 6], "~p": [1, 3, 5, 6], "\u30aa\u30d6\u30b8\u30a7\u30af\u30c8": [1, 3, 5, 6], "\u5426\u5b9a": [1, 2, 3, 5, 6], "\"not": [1, 3], "a1": [1, 3], "[\"": [1, 3], "!\"": [1, 3], ", a1": [1, 3], "\u8ad6\u7406\u7a4d": [1, 3], "\"and": [1, 3, 6], "\"&": [1, 3], "&\"": [1, 3], "\u8ad6\u7406\u548c": [1, 3], "\"or": [1, 3, 6], "\"|": [1, 3], "|\"": [1, 3], "\u542b\u610f": [1, 3], "\"imp": [1, 3], "a2": [1, 3], "=>": [1, 3], "\u540c\u5024": [1, 3], "\"equ": [1, 3], "<=": [1, 3, 4, 6], ">\"": [1, 3, 4, 6], "\u6392\u4ed6": [1, 3], "\u8ad6\u7406": [1, 6], "\"xor": [1, 3, 6], "\"^": [1, 3], "\"eq": 1, "==": [1, 6], "ne": [1, 6], "\"ne": 1, "!=": [1, 4, 6], "\"ge": 1, ">=": [1, 4, 6], "\"gt": 1, ", x1": 1, "\"le": 1, "\"lt": 1, "<\"": [1, 4, 6], "\\sum": 1, "_i": 1, "(exact": 1, "-k": [1, 3], "\"eqk": 1, "...": [1, 4, 6], "\"nek": 1, "(at": 1, "-least": [1, 3], "\"gek": 1, "\"gtk": 1, "-most": [1, 3], "\"lek": [1, 6], "\"ltk": 1, "alldifferent": 1, "\"alldifferent": [1, 4], ".defaultconstrainthook": 1, "\u8f9e\u66f8": [1, 3, 5, 6], "\u9806\u6bd4": 1, "\"lexcmp": [1, 4], "cmp": [1, 4, 6], "yn": [1, 4], "]]": [1, 3, 4], "\u6bd4\u8f03": [1, 6], "\"mulcmp": [1, 4], "\u30d9\u30ad": [1, 6], "\u4e57\u6bd4": 1, "\"powcmp": [1, 4], "\"bits": [1, 4], "\u30d7\u30ed\u30b0\u30e9\u30e0": [1, 2, 3, 5, 6], "\u5b66\u7fd2": [1, 2, 3, 5, 6], "\u76ee\u7684": [1, 2, 3, 5, 6], "\u4f5c\u6210": [1, 2, 3, 5, 6], "\u3044\u308b": [1, 2, 3, 4, 5, 6], "\u5b9f\u7528": [1, 2, 3, 5, 6], "\u9069\u7528": [1, 2, 3, 5, 6], "\u60f3\u5b9a": [1, 2, 3, 5, 6], "\u306a\u3044": [1, 2, 3, 5, 6], "class": [1, 2, 5, 6], "none": [1, 2, 3, 5, 6], "command": [1, 3, 5], "positiveonly": [1, 3, 5], "includeaux": [1, 3, 5], "verbose": [1, 2, 3, 5], "\u30bd\u30fc\u30b9": [1, 2, 3, 4, 5, 6], "\u30d9\u30fc\u30b9\u30af\u30e9\u30b9": [1, 2, 5, 6], "object": [1, 2, 5, 6], "\u30d1\u30e9\u30e1\u30fc\u30bf": [1, 2, 3, 4, 5, 6], "--": [1, 2, 3, 4, 5, 6], "\u4f7f\u7528": [1, 2, 3, 5, 6], "\u3059\u308b": [1, 2, 3, 4, 5, 6], "optional": [1, 2, 3, 5, 6], "\u30bd\u30eb\u30d0\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8": 1, "\u6307\u5b9a": [1, 3, 5, 6], "\u306a\u3051\u308c": [1, 2, 3, 5, 6], "\u7528\u3044\u308b": [1, 3], "str": [1, 2, 3, 5, 6], "\u5229\u7528": [1, 3, 5, 6], "\u30b3\u30de\u30f3\u30c9": [1, 3, 5], "/sat": 1, "4j": [1, 5], "\u308c\u308b": [1, 3, 5, 6], "(windows": 1, "\u306a\u3089": [1, 2, 3, 5, 6], "\\sat": 1, ".bat": [1, 5], "\u53c2\u7167": [1, 3, 6], "\u30e2\u30c7\u30eb": [1, 2, 3, 5], "\u306e\u307f": [1, 3, 5, 6], "\u542b\u3081\u308b": [1, 3, 5], "\u30c7\u30d5\u30a9\u30fc\u30eb\u30c8": [1, 2, 4, 5], ")\uff0e": [1, 2, 3, 5, 6], "\u88dc\u52a9": [1, 3, 5, 6], "int": [1, 2, 3, 5, 6], "\u6b63\u306a\u3089": [1, 2, 5], "\u5b9f\u884c": [1, 2, 3, 5], "\u8a73\u7d30": 1, "\u60c5\u5831": [1, 2, 3, 5], "\u8868\u793a": [1, 2, 3, 5], "model": [1, 3, 5, 6], "\u6700\u5f8c": [1, 2, 5], "\u5f97\u3089\u308c": 1, "\u3042\u308b\u3044": [1, 3, 6], "\u30ad\u30fc": [1, 3, 5, 6], "\u3068\u3057": [1, 3, 5, 6], "\u4fdd\u6301": [1, 6], "(dict": [1, 3, 5, 6], "type": [1, 5, 6], "dict": [1, 3, 5, 6], "stats": [1, 5], "\u7d71\u8a08": [1, 2, 3, 5], "\u30c7\u30fc\u30bf": [1, 3, 5, 6], "minimize": 1, "\u5c0f\u5316": 1, "\u7dda\u5f62": [1, 6], "\uff0enone": [1, 5], "\u6700\u5c0f": 1, "maximize": 1, "\u6700\u5927": [1, 3, 5], "\uff0eminimize": 1, "\u8a2d\u5b9a": [1, 3, 4, 5], "\u3044\u308c": [1, 2, 3], "\u305d\u3061\u3089": 1, "\u512a\u5148": 1, "add": [1, 2, 5, 6], "constraints": 1, "cnf": [1, 3, 5, 6], "\u8ffd\u52a0": [1, 2, 3, 5], "\u547c\u3073\u51fa\u3059": 1, "\u305f\u3060\u3057": 1, "\u5834\u5408": [1, 3, 5, 6], "list": [1, 2, 3, 4, 5, 6], "\u30ea\u30b9\u30c8": [1, 2, 3, 5, 6], "find": [1, 5], "\u6c42\u3081": [1, 3, 5], "\u5909\u63db": [1, 2, 3, 4, 6], "\u8fd4\u3059": [1, 2, 3, 5, 6], "\u623b\u308a\u5024": [1, 2, 3, 4, 5, 6], "\u898b\u3064\u304b\u3063": [1, 2, 3, 5], "\u898b\u3064": [1, 5], "getstat": [1, 2, 5], "includeall": [1, 5], "\u3053\u306e": [1, 3, 5, 6], "\u306b\u3088\u308b": [1, 5], "\u306a\u304a": [1, 5], "\u6642\u9593": [1, 3, 5], "\u5358\u4f4d": [1, 5], "\uff0ccpu": [1, 5], "\u306a\u304f": [1, 3, 5], "\u7d4c\u904e": [1, 5], "\u3042\u308b": [1, 3, 5, 6], "\u30d5\u30a9\u30fc\u30eb\u30c9": [1, 5], "\u306a\u3089\u3059\u3079\u3066": [1, 5], "result": [1, 5], "\u7d50\u679c": [1, 3, 5], "satisfiable": [1, 3, 5], "unsatisfiable": [1, 5], "minimum": 1, "maximum": 1, "timeout": [1, 3, 5], "unknown": [1, 5], "ncalls": [1, 5], "\u547c\u3073\u51fa\u3057": [1, 5], "\u56de\u6570": [1, 5], "nmodels": [1, 5], "\u898b\u3064\u3051": [1, 5], "time": [1, 5], "\u95a2\u6570": [1, 2, 3, 4, 5, 6], "encoding": [1, 3], "\u304b\u304b\u3063": [1, 5], "\u7d2f\u7a4d\u5024": [1, 5], "\uff0c\u79d2": [1, 5], "solving": [1, 3, 5], "\u30d5\u30a3\u30fc\u30eb\u30c9": [1, 5], "\u500b\u6570": [1, 2, 3, 5], "clauses": [1, 2, 3, 5], "conflicts": [1, 3, 5], "\u885d\u7a81": [1, 2, 5], "decisions": [1, 2, 3, 5], "\u6c7a\u5b9a": [1, 2, 5], "propagations": [1, 3, 5], "\u4f1d\u64ad": [1, 2, 5], "solutions": [1, 2, 5], "csp": [1, 3], "num": [1, 2, 3, 5], "\u4e0e\u3048": [1, 2, 3, 6], "\u3089\u308c": [1, 2, 3, 5, 6], "\u8907\u6570": [1, 3, 5], "\u63a2\u7d22": [1, 2, 3, 5], "\u305d\u308c\u3089": [1, 3, 5, 6], "yield": [1, 2, 3, 5, 6], "\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf": [1, 2, 3, 5, 6], "\u4e0a\u9650": [1, 5], "\u307e\u3067": [1, 2, 5], "\u898b\u3064\u304b\u308c": [1, 5], "\u305d\u308c": [1, 2, 3, 5], "\u6700\u9069": 1, "\u3068\u3057\u3066": [1, 3, 4, 5, 6], "\u4e8c\u5206": 1, "\u5316\u554f": 1, "\u5024\u672a": 1, "\u4e0d\u80fd": 1, "\u5024\u4ee5": 1, "\u53ef\u80fd": [1, 3, 5], "\u4eee\u5b9a": 1, "\u540c\u69d8": 1, "\u3088\u308a": [1, 2], "\u5927\u304d\u3044": 1, "\u304a\u3044": 1, "\u7570\u306a\u3063": [1, 5], "\u540c\u3058": [1, 3, 5, 6], "\u307f\u306a\u3055": [1, 6], "\u5168\u89e3": [1, 2, 3, 5], "\u5217\u6319": [1, 2, 3, 5, 6], "solve": [1, 2, 5], "stat": [1, 2, 3, 5], "functionhooks": 1, "constrainthooks": 1, "\u62bd\u8c61": 1, "\u5316\u6642": [1, 6], "\u30d5\u30c3\u30af": [1, 4], "defaultfunctionhooks": 1, "defaultconstrainthooks": 1, "atrributes": 1, "):": [1, 3, 5, 6], "<function": 1, ">]": 1, "\u547c\u3073\u51fa\u3055": 1, "\u30b5\u30f3\u30d7\u30eb": [1, 3, 5, 6], ">>": [1, 3, 5, 6], "function": [1, 4], "at": [1, 3], "0x": 1, "0efa": 1, "def": 1, "myfunctionhook": 1, "(f": [1, 3], "match": 1, "case": 1, "+\"": 1, "]:": 1, "return": 1, ".append": 1, "(myfunctionhook": 1, "myconstrainthook": 1, "(c": [1, 6], "even": 1, "(x": [1, 6], "([": [1, 3, 5, 6], "(lb": 1, "),": [1, 3, 5, 6], "(ub": 1, ")]": [1, 3, 5, 6], "\"=": [1, 4, 6], "=\"": [1, 3, 4, 6], ", y": 1, "(myconstrainthook": 1, "delimeq": 1, "=k": 1, "\u533a\u5207\u308a": 1, "\u6587\u5b57": [1, 2, 3], "delimge": 1, "delimbit": 1, "@'": 1, "+lb": 1, "defint": 1, "\u751f\u6210": [1, 6], "\u5185\u90e8": [1, 2, 6], "\"_": [1, 6], "\u4e0b\u9650": 1, "\u4f8b\u5916": [1, 3, 5, 6], "\u306f\u3059": 1, "\u3067\u306b": [1, 2], "\u3053\u308c": [1, 5], "intlb": 1, "\uff0ebool": 1, "intub": 1, "intrange": 1, "range": 1, "wsumbound": 1, "\u7dda\u5f62\u548cw": [1, 6], "\u7dda\u5f62\u548c": [1, 6], "\u5024lb": 1, "\u5024ub": 1, "getbound": 1, "\u5f0fs": [1, 6], "\u69cb\u6587": [1, 3, 6], "\u9593\u9055\u3063": [1, 6], "vareqk": 1, "*v": 1, "\u4fc2\u6570": [1, 6], "\uff0ck": [1, 6], "~v": 1, "\u305d\u306e": [1, 3, 5, 6], "\uff0ev": 1, "\u542b\u307e": [1, 3], "\u308c\u308c": 1, "vartobool": 1, "\u3060\u3051": [1, 3], "\u53d6\u308b": 1, "\u3068\u304d": [1, 3, 6], "\uff0cv": 1, "\u306b\u5bfe\u3059\u308b": [1, 2, 3, 6], "\u6d3e\u751f": 1, "\u5b9f\u88c5": [1, 3], "\u5fc5\u8981": [1, 3], "\u901a\u308a": [1, 6], "directencoding": 1, "\u306b\u5bfe\u5fdc": 1, "orderencoding": 1, "logencoding": 1, "\u6700\u4e0b\u4f4d": [1, 6], "\u5bfe\u5fdc": [1, 4], "encodeint": 1, "isboollike": 1, "\u4ee5\u5916": [1, 3], "encodewsumeq": 1, "encodewsumne": 1, "encodewsumle": 1, "encode": 1, "put": [1, 6], "\uff0esat": 1, "\u884c\u308f": 1, "decode": 1, "satmodel": 1, "getblock": 1, "\u6761\u4ef6": 1, "\u3067\u306e": 1, "vargek": 1, "varbitk": 1, "\u4f4d\u7f6e": [1, 6], "getbools": 1, "\u8868\u73fe": [1, 2, 5], "interactive": 2, "\u30c7\u30d5\u30a9\u30eb\u30c8": [2, 3, 5], "\u771f\u306a\u3089": [2, 6], "\u4f1a\u8a71": 2, "nvars": [2, 5], "nclauses": [2, 5], "tolit": 2, "negative": 2, "\u756a\u53f7v": 2, "\u756a\u53f7": [2, 5], "tovar": 2, "lit": 2, "\u30bf\u30d7\u30eb": [2, 6], "\u73fe\u5728": [2, 5, 6], "\u771f\u7406": [2, 3], "\u5272\u5f53": [2, 3], "newvar": 2, "vname": 2, "\u65b0\u3057\u3044": 2, "decisionlevel": 2, "\u30ec\u30d9\u30eb": 2, "enqueue": 2, "reason": 2, "\u30ad\u30e5\u30fc": 2, "\u304c\u3059": 2, "\u3042\u308c": 2, "\u8fd4\u3057": [2, 5], "\u6c7a\u307e\u3063": 2, "\uff0ctrue": 2, "\u7406\u7531": 2, "\u751f\u3058": 2, "assume": 2, "\u771f\u3068": 2, "propagateclause": 2, "\u756a\u76ee": 2, "\u306b\u5bfe\u3057": [2, 3], "\u51e6\u7406": [2, 3], "\u884c\u3046": 2, "propagate": 2, "\u751f\u3058\u308c": 2, "\u3042\u3063": 2, "cancel": [2, 5], "\u30d0\u30c3\u30af\u30c8\u30e9\u30c3\u30af": 2, "canceluntil": 2, "level": 2, "newdecision": 2, "\u672a\u5272": 2, "\u5f53\u3066": [2, 3, 6], "\u9078\u629e": [2, 3], "\u507d\u3068": 2, "backtrack": 2, "\u623b\u308a": 2, "\u3055\u3089\u306b": 2, "\u623b\u308b": 2, "\u3057\u3066": 2, "getmodel": 2, "search": 2, "\u884c\u3044": 2, "info": 2, "msg": 2, "\u30e1\u30c3\u30bb\u30fc\u30b8": 2, "self": [2, 5], ".verbose": 2, "\u5927\u304d\u3051\u308c": 2, ".interactive": 2, "\u30e6\u30fc\u30b6": 2, "\u5165\u529b": [2, 5], "\u5f85\u3064": 2, "\u8868\u8a18": 2, "clause": [2, 3], "assigns": 2, "\u5024\u5272": [2, 3, 6], "\u5024\u5272\u5f53": [2, 3], "watches": 2, "\u76e3\u8996": 2, "addinternalclause": 2, "adddimacsclause": 2, "dimacslits": 2, "dimacs": [2, 3, 5], "\u5f62\u5f0f": [2, 3, 5, 6], "\u6b63\u8ca0": 2, "todimacslit": 2, "\u59cb\u307e\u308c": [2, 6], "todimacslits": 2, "addclause": 2, "load": 2, "file": 2, "\u30d5\u30a1\u30a4\u30eb": [2, 3, 5], "\u8aad\u8fbc\u3093": 2, "\u6a19\u6e96": [2, 3, 5], "\u4fbf\u5229": 3, "\u307e\u3068\u3081": 3, "(\"": [3, 5, 6], "\")": [3, 5, 6], "\u88dc\u30ea\u30c6\u30e9\u30eb": 3, "\u96c6\u5408": 3, "\u306b\u3064\u3044\u3066": [3, 6], "functions": 3, "and": 3, ")\n{": 3, ")}": [3, 5], "vs": 3, "\u5404\u5024": 3, "0\u304b": [3, 5], "(assignments": 3, "))": [3, 6], "[{": 3, "},": [3, 6], "{p": [3, 5], "}]": [3, 5], "\uff0cf": 3, "\u306f\u3044\u3063": 3, "\u305f\u3093": [3, 6], "\u305d\u306e\u5f8c": 3, "\u8a08\u7b97": 3, "\u542b\u307e\u308c": [3, 6], "\u5f15\u6570": [3, 4], "\u8868\u3055": [3, 6], "\u8ad6\u7406\u5f0f": 3, "\u30a8\u30e9\u30fc": 3, "not": 3, "})": 3, "\u8fd4\u3055": 3, "fs": 3, "\u5024\u8868": 3, "\u51fa\u529b": [3, 5], "*fs": 3, "| p": 3, "['": 3, "',": [3, 5, 6], "or": 3, "|-": 3, "-|": 3, "\u6052\u771f": 3, "\u3069\u3046": 3, "\u5224\u5b9a": 3, "\u3059\u3079": 3, "\u542b\u307e\u308c\u308b": [3, 6], "\u3068\u3059\u308b": 3, "\u304b\u304b\u308b": 3, "\u305d\u3046": [3, 6], ",~": 3, "])": [3, 5], "equ": 3, "f2": 3, "(p": 3, ",p": 3, "\u306e\u3059\u3079\u3066": [3, 6], "\uff0ca": 3, "\u3067\u304d\u308b": [3, 5, 6], "for": [3, 5], "in": [3, 5], ", num": 3, "print": [3, 5], "(model": 3, "\u6f14\u7b97\u5b50": [3, 6], "\u542b\u3080": [3, 5, 6], "rightarrow": 3, "\\lnot": 3, "lor": 3, "leftrightarrow": 3, "(\\": 3, "lnot": 3, "land": 3, "oplus": 3, "(a": 3, "xor": 3, "'or": 3, "'not": 3, "positive": [3, 6], "\u304a\u3088\u3073": [3, 6], "\u73fe\u308c\u308b": [3, 6], "\u3044\u3063\u305f\u3093": 3, "\u542b\u3080\u5f0f": 3, "\u306e\u3061": [3, 5, 6], "\u7f6e\u304d": 3, "\u63db\u3048\u308b": 3, "\u64cd\u4f5c": 3, "\u518d\u5e30": 3, "\u7e70\u308a\u8fd4\u3057": 3, "'and": 3, "simplify": 3, "formula": 3, "\u7a4d\u6a19": 3, "\u6e96\u5f62": 3, "(cnf": [3, 5], "\u3042\u308a": 3, "\u5404\u7bc0": 3, "\u5206\u914d": 3, "\u6cd5\u5247": 3, "\u7528\u3044": [3, 5], "=true": [3, 5], "\u65b9\u6cd5": 3, "\u7c21\u5358": 3, "\u524a\u9664": [3, 5], "\u7bc0\u4e2d": [3, 5], "\u91cd\u8907": 3, "\u73fe\u308c": 3, "1\u3064": 3, "\u306b\u307e\u3068\u3081\u308b": 3, "\u3059\u308c": [3, 6], "\u6700\u60aa": 3, "\u30b5\u30a4\u30ba": [3, 5], "\u305f\u3068\u3048": 3, ")\\": 3, "\\cdots": 3, "\\lor": 3, "_n": [3, 6], "\uff0ecnf": 3, "[~p": 3, "=false": 3, "[[~": 3, "\u548c\u6a19": 3, "(dnf": 3, "dnf": 3, "\u9023\u8a00": 3, "\u5404\u9023": 3, "\u8a00\u7bc0": 3, "\u5f0f\u4e2d": 3, "\u3053\u3068": [3, 5, 6], "\u9023\u8a00\u7bc0": 3, "\uff0ednf": 3, "[[": 3, "xx": [3, 6], "-one": 3, "\u57fa\u6570": [3, 6], "\u5236\u7d04": [3, 4, 6], "\uff0c\u7bc0": 3, "ge1": 3, "(clause": 3, "\uff0c\u3059\u3079\u3066": [3, 5], "xi": [3, 6], "xj": 3, "\u7d44\u5408": 3, "\u306b\u5bfe\u3057\u7bc0": 3, "\u30da\u30a2\u30ef\u30a4\u30ba": 3, "\u547c\u3070": 3, "\u4e00\u822c": 3, "\u9010\u6b21": [3, 6], "\u30ab\u30a6\u30f3\u30bf": [3, 6], "\u307b\u3046": 3, "\u826f\u3044": 3, "le1": 3, "[~": 3, "exact": 3, "eq1": 3, "\uff0cxi": 3, "\u9078\u3093": 3, "\u3059\u306a\u308f\u3061": 3, "\u6392\u9664": 3, "\u30d0\u30a4\u30ce\u30df\u30ca\u30eb": 3, "[p": [3, 5, 6], "\u4fdd\u5b58": [3, 5], "\u30b0\u30ed\u30fc\u30d0\u30eb": 3, "lastonly": 3, ")\u307e\u305f": 3, "\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8": [3, 6], "\u79d2\u6570": [3, 5], "tempdir": [3, 5], "of": [3, 5, 6], "positveonly": 3, "\u8ca0\u306a\u3089": 3, "verobse": 3, "\u5909\u66f4": 3, "\u4e00\u6642\u30d5\u30a1\u30a4\u30eb": [3, 5], "\u30c7\u30a3\u30ec\u30af\u30c8\u30ea": [3, 5], "sol": [3, 5], "(sol": [3, 5], "\"p": [3, 6], ")=": 3, "}\"": 3, ")\np": 3, "((": 3, "({": [3, 6], "':": [3, 5], "{'": [3, 5], "\u30b7\u30fc\u30b1\u30f3\u30b9": 3, "\uff0eencoder": 3, "\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9": [3, 4], "\uff0c\"": 3, "\u59cb\u307e\u308b": [3, 6], "\">": 3, "direct": 3, "filename": 3, "\u3067\u3042\u308a": 3, "\u6271\u308f": 3, "\u305d\u306e\u307e\u307e": [3, 4], "\u66f8\u304d\u8fbc\u307e": 3, "\u5148\u982d": [3, 6], "#\"": [3, 6], "\u3067\u306a\u3044": 3, "\u30ed\u30fc\u30c9": 3, "tmp": 3, "/foo": 3, "\u8aad\u307f\u8fbc\u307f": 3, "\u5404\u884c": 3, "\u7a7a\u884c": 3, "\u7a7a\u767d": 3, "\u533a\u5207": 3, "\u59cb\u307e\u3089": 3, "\u4efb\u610f": [3, 5], "\u8aad\u307f\u8fbc\u3093": 3, ".cnf": 3, "json": 3, "$\"": 3, "\u4ed8\u3051": [3, 5, 6], "\u52a0\u3048": [3, 6], "@\"": [3, 6], "\u304c\u3042\u308b": 3, "\u65b0\u898f": 4, "\u305f\u3081": [4, 6], "\u63d0\u4f9b": 4, "constraint": [4, 6], "(cmp": 4, ", \"": [4, 6], "\u30e9\u30c3\u30d1\u30fc\u30af\u30e9\u30b9": 5, "cnffile": 5, "outfile": 5, "delete": 5, "maxclauses": 5, "limit": 5, "\u5b9f\u969b": 5, "\u5916\u90e8": 5, "\uff0cdimacs": 5, "\uff0csat": 5, "competition": 5, "\u304c\u3063": 5, "\u3082\u306e": [5, 6], "defaultcommand": 5, "windows": 5, "\"sat": 5, "\"\uff0c": 5, "\u305d\u306e\u4ed6": 5, "\".": 5, "tmpdir": 5, "\u30b7\u30b9\u30c6\u30e0": 5, "\u304c\u3046": 5, "\u4e00\u6642": 5, "\u7bc0\u6570": 5, "\u8d85\u3048": 5, "\u305f\u3089": 5, "\u767a\u751f": 5, "defaultmaxclauses": 5, "\u5236\u9650": 5, "defaultlimit": 5, "commitposition": 5, "commit": 5, "\u72b6\u614b": 5, "\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba": 5, "buffer": 5, "\u66f8\u304d\u8fbc\u307f": 5, "\u30d0\u30c3\u30d5\u30a1\u30fc": 5, "bytearray": 5, "buflimit": 5, "\u30d0\u30a4\u30c8": 5, "./": 5, "(num": 5, "\u3059\u3079\u3066": [5, 6], "\u30bd\u30eb\u30d0\u30fc\u30b3\u30de\u30f3\u30c9": 5, "bin": 5, "/kissat": 5, "linux": 5, "wsl": 5, "\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb": 5, "defaulttempdir": 5, "updatedimacsheader": 5, "\u30d8\u30c3\u30c0\u30fc": 5, "\u66f4\u65b0": 5, "\u542b\u3080\u7bc0": [5, 6], "\u307f\u306a\u3057": 5, "\u5408\u8a08": 5, "2\u3064": 5, ", {": 5, "\u898b\u3064\u304b\u3089": 5, "\uff0c\u30ad\u30fc": 5, "\u6c42\u3081\u308b": 5, "\u304a\u3051\u308b": [5, 6], "\u96c6\u8a08": 5, "\u4e00\u5ea6": 5, "}}": 5, "(true": 5, "addblock": 5, "\u30d6\u30ed\u30c3\u30af": 5, "\u306b\u3088\u308a": 5, "\u9055\u3044": 5, "\u7121\u8996": 5, "\u8fd4\u308b": 5, "\u6e21\u305b": 5, "\u623b\u3059": 5, "size": 5, "\u30e1\u30bd\u30c3\u30c9": 5, "\u518d\u5ea6": 5, "\u8d77\u52d5": 5, "\u307f\u306a\u3059": 5, "\u6700\u521d": 5, "\uff0csatisfiable": 5, "unsatisfiable\u304b": 5, "4\u3064": 5, "\u5b58\u5728": 5, "\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30fc": 6, "\u30bf\u30a4\u30e0\u30a2\u30a4\u30c8": 6, "\u5217\u6f14": 6, "\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9": 6, "\u524d\u51e6": 6, "exception": 6, "name": 6, "internal": 6, "\u6301\u3064": 6, "\u540d\u524d": 6, "?\"": 6, "~\"": 6, "\u542b\u3093": 6, "\uff0etrue": 6, "\u30d5\u30e9\u30b0": 6, "\u305f\u306a": 6, "~~p": 6, "abs": 6, "(~": 6, "\u9664\u3044": 6, "= ~": 6, ")\"": 6, "> p": 6, "\u3069\u3061\u3089": 6, "\u306a\u308a": 6, "isaux": 6, "\"x": 6, "\u5f62\u548c": 6, "cdots": 6, "\\textrm": 6, "{wsum": 6, "}(": 6, "\\{x": 6, "ldots": 6, ":a": 6, "\\}": 6, ", c": 6, "(int": 6, "\u3067\u3082": 6, "\u3088\u3044": 6, "\u90e8\u5206": 6, "# x": 6, ").": 6, "mul": 6, "*x": 6, "_keys": 6, "coef": 6, "isconstant": 6, "sub": 6, "where": 6, "\u7b49\u3057\u3044": 6, "a\u500d\u3057": 6, "neg": 6, "other": 6, "\u52a0\u3048\u308b": 6, "\uff0ewsum": 6, "\uff0c\u3044\u3063": 6, "\u3089\u308c\u308b": 6, "\u5f15\u3044": 6, "\u5f15\u304f": 6, "\u5b9a\u3081": 6, "toexpr": 6, "\u8868\u3059\u5f0f": 6, "> w": 6, "'+": 6, "'*": 6, "bins": 6, "[i": 6, "\u305d\u306e\u548c": 6, "][": 6, "\u306e\u3044": 6, "\u305a\u308c": 6, "classmethod": 6, "\u5217xx": 6, "= k": 6, "nek": 6, "gtk": 6, "ltk": 6, "yy": 6, "= y": 6, "gt": 6, "less": 6, "lt": 6, "addnum": 6, "*xx": 6, "addmul": 6, "*yy": 6, "*a": 6, "addpower": 6, "^n": 6, "issimpleseq": 6, "\u8868\u3057": 6, "tosimpleseq": 6, "\u9577\u3055": 6, "tobchain": 6, "zz": 6, "\u5217zz": 6, "\u3068\u3044\u3046": 6, "dadda": 6, "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0": 6, "(encoder": 6, "> x": 6, "> b": 6, "(-": 6, "**": 6, "*y": 6, ")*": 6, "\u306e\u3044\u305a\u308c": 6, "\uff0cs": 6, "(i": 6, "\uff0cxx": 6, "introduceaux": 6, "\u62e1\u5f35": 6, "\u62e1\u5f35cnf": 6, "xcnf": 6, "\u3053\u3053": 6, "pi": 6, "\uff0cn": 6, "pn": 6, "\u901a\u5e38": 6, "eq0": 6, ", w": 6, "(w": 6, "ne0": 6, "le0": 6, "p1": 6, "+pn": 6, "\u5c0e\u5165": 6, "towsum": 6, "isbc": 6, "\u304b\u3069": 6, "\u8abf\u3079\u308b": 6, "\u306a\u308f\u3061": 6, "1\u304b": 6, "tobc": 6, "(xx": 6, "\uff0ek": 6, "toxcnf": 6, "\u507d\u306a\u3089": 6, "package": [7, 8], "submodules": [7, 8], "module": [7, 8], "contents": [7, 8], "\u7d22\u5f15": 7, "\u691c\u7d22": 7, "\u30da\u30fc\u30b8": 7}, "objects": {"": [[0, 0, 0, "-", "cspsat"]], "cspsat": [[1, 0, 0, "-", "csp"], [2, 0, 0, "-", "dpll"], [3, 0, 0, "-", "functions"], [4, 0, 0, "-", "hooks"], [5, 0, 0, "-", "sat"], [6, 0, 0, "-", "util"]], "cspsat.csp": [[1, 1, 1, "", "DirectEncoder"], [1, 1, 1, "", "Encoder"], [1, 1, 1, "", "LogEncoder"], [1, 1, 1, "", "OrderEncoder"], [1, 1, 1, "", "Solver"]], "cspsat.csp.DirectEncoder": [[1, 2, 1, "", "decode"], [1, 2, 1, "", "encodeInt"], [1, 2, 1, "", "encodeWsumEq0"], [1, 2, 1, "", "encodeWsumLe0"], [1, 2, 1, "", "encodeWsumNe0"], [1, 2, 1, "", "getBlock"], [1, 2, 1, "", "varToBool"]], "cspsat.csp.Encoder": [[1, 2, 1, "", "decode"], [1, 2, 1, "", "defInt"], [1, 3, 1, "", "defaultConstraintHooks"], [1, 3, 1, "", "defaultFunctionHooks"], [1, 3, 1, "", "delimBit"], [1, 3, 1, "", "delimEq"], [1, 3, 1, "", "delimGe"], [1, 2, 1, "", "encode"], [1, 2, 1, "", "encodeInt"], [1, 2, 1, "", "encodeWsumEq0"], [1, 2, 1, "", "encodeWsumLe0"], [1, 2, 1, "", "encodeWsumNe0"], [1, 2, 1, "", "getBlock"], [1, 2, 1, "", "getBound"], [1, 2, 1, "", "intLb"], [1, 2, 1, "", "intRange"], [1, 2, 1, "", "intUb"], [1, 2, 1, "", "isBoolLike"], [1, 2, 1, "", "put"], [1, 2, 1, "", "toCNF"], [1, 2, 1, "", "varEqK"], [1, 2, 1, "", "varToBool"], [1, 2, 1, "", "variables"], [1, 2, 1, "", "wsumBound"]], "cspsat.csp.LogEncoder": [[1, 2, 1, "", "decode"], [1, 2, 1, "", "encodeInt"], [1, 2, 1, "", "encodeWsumEq0"], [1, 2, 1, "", "encodeWsumLe0"], [1, 2, 1, "", "encodeWsumNe0"], [1, 2, 1, "", "getBlock"], [1, 2, 1, "", "getBools"], [1, 2, 1, "", "varBitK"], [1, 2, 1, "", "varEqK"], [1, 2, 1, "", "varToBool"]], "cspsat.csp.OrderEncoder": [[1, 2, 1, "", "decode"], [1, 2, 1, "", "encodeInt"], [1, 2, 1, "", "encodeWsumEq0"], [1, 2, 1, "", "encodeWsumLe0"], [1, 2, 1, "", "encodeWsumNe0"], [1, 2, 1, "", "getBlock"], [1, 2, 1, "", "varGeK"], [1, 2, 1, "", "varToBool"]], "cspsat.csp.Solver": [[1, 2, 1, "", "add"], [1, 2, 1, "", "find"], [1, 2, 1, "", "getStat"], [1, 3, 1, "", "maximize"], [1, 3, 1, "", "minimize"], [1, 3, 1, "", "model"], [1, 2, 1, "", "solutions"], [1, 2, 1, "", "solve"], [1, 3, 1, "", "stats"]], "cspsat.dpll": [[2, 1, 1, "", "DPLL"]], "cspsat.dpll.DPLL": [[2, 2, 1, "", "add"], [2, 2, 1, "", "addClause"], [2, 2, 1, "", "addDimacsClause"], [2, 2, 1, "", "addInternalClause"], [2, 2, 1, "", "assigns2repr"], [2, 2, 1, "", "assume"], [2, 2, 1, "", "backtrack"], [2, 2, 1, "", "cancel"], [2, 2, 1, "", "cancelUntil"], [2, 2, 1, "", "clause2repr"], [2, 2, 1, "", "decisionLevel"], [2, 2, 1, "", "decisions2repr"], [2, 2, 1, "", "enqueue"], [2, 2, 1, "", "getModel"], [2, 2, 1, "", "getStat"], [2, 2, 1, "", "info"], [2, 2, 1, "", "lit2repr"], [2, 2, 1, "", "load"], [2, 2, 1, "", "nClauses"], [2, 2, 1, "", "nVars"], [2, 2, 1, "", "newDecision"], [2, 2, 1, "", "newVar"], [2, 2, 1, "", "propagate"], [2, 2, 1, "", "propagateClause"], [2, 2, 1, "", "search"], [2, 2, 1, "", "solutions"], [2, 2, 1, "", "solve"], [2, 2, 1, "", "toDimacsLit"], [2, 2, 1, "", "toDimacsLits"], [2, 2, 1, "", "toLit"], [2, 2, 1, "", "toVar"], [2, 2, 1, "", "value"], [2, 2, 1, "", "var2repr"], [2, 2, 1, "", "watches2repr"]], "cspsat.functions": [[3, 4, 1, "", "assignments"], [3, 5, 1, "", "defaultTimeout"], [3, 4, 1, "", "eq1"], [3, 4, 1, "", "eqK"], [3, 4, 1, "", "ge1"], [3, 4, 1, "", "geK"], [3, 4, 1, "", "getTimeout"], [3, 4, 1, "", "isEquiv"], [3, 4, 1, "", "isSat"], [3, 4, 1, "", "isValid"], [3, 4, 1, "", "le1"], [3, 4, 1, "", "leK"], [3, 4, 1, "", "loadCSP"], [3, 4, 1, "", "loadSAT"], [3, 4, 1, "", "models"], [3, 4, 1, "", "saveCSP"], [3, 4, 1, "", "saveDimacs"], [3, 4, 1, "", "saveSAT"], [3, 4, 1, "", "setTimeout"], [3, 4, 1, "", "solutionsCSP"], [3, 4, 1, "", "solutionsSAT"], [3, 4, 1, "", "solveCSP"], [3, 4, 1, "", "solveSAT"], [3, 5, 1, "", "statData"], [3, 4, 1, "", "status"], [3, 4, 1, "", "toCNF"], [3, 4, 1, "", "toDNF"], [3, 4, 1, "", "toNF"], [3, 4, 1, "", "toNNF"], [3, 4, 1, "", "truthTable"], [3, 4, 1, "", "value"], [3, 4, 1, "", "variables"]], "cspsat.hooks": [[4, 4, 1, "", "defaultConstraintHook"], [4, 4, 1, "", "defaultFunctionHook"]], "cspsat.sat": [[5, 1, 1, "", "SAT"]], "cspsat.sat.SAT": [[5, 2, 1, "", "add"], [5, 2, 1, "", "addBlock"], [5, 3, 1, "", "bufLimit"], [5, 3, 1, "", "buffer"], [5, 2, 1, "", "cancel"], [5, 2, 1, "", "commit"], [5, 3, 1, "", "commitPosition"], [5, 3, 1, "", "defaultCommand"], [5, 3, 1, "", "defaultLimit"], [5, 3, 1, "", "defaultMaxClauses"], [5, 3, 1, "", "defaultTempdir"], [5, 2, 1, "", "find"], [5, 2, 1, "", "getStat"], [5, 3, 1, "", "model"], [5, 2, 1, "", "nClauses"], [5, 2, 1, "", "nVars"], [5, 3, 1, "", "nclauses"], [5, 2, 1, "", "solutions"], [5, 2, 1, "", "solve"], [5, 3, 1, "", "stats"], [5, 2, 1, "", "updateDimacsHeader"], [5, 3, 1, "", "variables"]], "cspsat.util": [[6, 1, 1, "", "Binary"], [6, 1, 1, "", "BinaryEquation"], [6, 1, 1, "", "Bool"], [6, 6, 1, "", "CspsatException"], [6, 6, 1, "", "CspsatTimeout"], [6, 5, 1, "", "FALSE"], [6, 1, 1, "", "Preprocessor"], [6, 1, 1, "", "SeqCounter"], [6, 5, 1, "", "TRUE"], [6, 1, 1, "", "Var"], [6, 1, 1, "", "Wsum"]], "cspsat.util.Binary": [[6, 2, 1, "", "add"], [6, 2, 1, "", "addMul"], [6, 2, 1, "", "addNum"], [6, 2, 1, "", "addPower"], [6, 3, 1, "", "bins"], [6, 2, 1, "", "eq"], [6, 2, 1, "", "eqK"], [6, 2, 1, "", "ge"], [6, 2, 1, "", "geK"], [6, 2, 1, "", "gt"], [6, 2, 1, "", "gtK"], [6, 2, 1, "", "isSimpleSeq"], [6, 2, 1, "", "le"], [6, 2, 1, "", "leK"], [6, 2, 1, "", "lt"], [6, 2, 1, "", "ltK"], [6, 2, 1, "", "ne"], [6, 2, 1, "", "neK"], [6, 2, 1, "", "put"], [6, 2, 1, "", "toBchain"], [6, 2, 1, "", "toCNF"], [6, 2, 1, "", "toSimpleSeq"]], "cspsat.util.BinaryEquation": [[6, 2, 1, "", "add"], [6, 2, 1, "", "addMul"], [6, 2, 1, "", "addNum"], [6, 2, 1, "", "addPower"], [6, 2, 1, "", "cmp0"]], "cspsat.util.Bool": [[6, 2, 1, "", "isAux"]], "cspsat.util.Preprocessor": [[6, 2, 1, "", "isBC"], [6, 2, 1, "", "toBC"], [6, 2, 1, "", "toWsum"], [6, 2, 1, "", "toXCNF"]], "cspsat.util.SeqCounter": [[6, 2, 1, "", "eqK"], [6, 2, 1, "", "geK"], [6, 2, 1, "", "gtK"], [6, 2, 1, "", "leK"], [6, 2, 1, "", "ltK"], [6, 2, 1, "", "neK"]], "cspsat.util.Var": [[6, 2, 1, "", "isAux"]], "cspsat.util.Wsum": [[6, 2, 1, "", "add"], [6, 3, 1, "", "c"], [6, 2, 1, "", "coef"], [6, 2, 1, "", "isConstant"], [6, 2, 1, "", "mul"], [6, 2, 1, "", "neg"], [6, 2, 1, "", "sub"], [6, 2, 1, "", "toExpr"], [6, 2, 1, "", "value"], [6, 2, 1, "", "variables"], [6, 2, 1, "", "where"], [6, 3, 1, "", "wsum"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:function", "5": "py:data", "6": "py:exception"}, "objnames": {"0": ["py", "module", "Python \u30e2\u30b8\u30e5\u30fc\u30eb"], "1": ["py", "class", "Python \u30af\u30e9\u30b9"], "2": ["py", "method", "Python \u30e1\u30bd\u30c3\u30c9"], "3": ["py", "attribute", "Python \u306e\u5c5e\u6027"], "4": ["py", "function", "Python \u306e\u95a2\u6570"], "5": ["py", "data", "Python \u30c7\u30fc\u30bf"], "6": ["py", "exception", "Python \u4f8b\u5916"]}, "titleterms": {"cspsat": [0, 1, 2, 3, 4, 5, 6, 7, 8], "package": 0, "submodules": 0, "module": [0, 1, 2, 3, 4, 5, 6], "contents": 0, ".csp": 1, "\u5ba3\u8a00": 1, "\u8a18\u6cd5": [1, 3], "\u5236\u7d04": 1, "\u30b0\u30ed\u30fc\u30d0\u30eb": 1, ".dpll": 2, ".functions": 3, "\u547d\u984c": 3, "\u8ad6\u7406": 3, "\u5909\u6570": 3, "\uff0ea": 3, "..": 3, ".,": 3, "an": 3, ".hooks": 4, ".sat": 5, ".util": 6, "\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8": 7, "\u76ee\u6b21": 7}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.todo": 2, "sphinx": 60}, "alltitles": {"cspsat package": [[0, "cspsat-package"]], "Submodules": [[0, "submodules"]], "Module contents": [[0, "module-cspsat"]], "cspsat.csp module": [[1, "module-cspsat.csp"]], "\u5ba3\u8a00\u306e\u8a18\u6cd5": [[1, "id1"]], "\u5f0f\u306e\u8a18\u6cd5": [[1, "id2"]], "\u5236\u7d04\u306e\u8a18\u6cd5": [[1, "id3"]], "\u30b0\u30ed\u30fc\u30d0\u30eb\u5236\u7d04\u306e\u8a18\u6cd5": [[1, "id4"]], "cspsat.dpll module": [[2, "module-cspsat.dpll"]], "cspsat.functions module": [[3, "module-cspsat.functions"]], "\u547d\u984c\u8ad6\u7406\u5f0f\u306e\u8a18\u6cd5 (P\u306f\u547d\u984c\u5909\u6570\uff0eA1, A2, ..., An\u306f\u547d\u984c\u8ad6\u7406\u5f0f)": [[3, "id1"]], "cspsat.hooks module": [[4, "module-cspsat.hooks"]], "cspsat.sat module": [[5, "module-cspsat.sat"]], "cspsat.util module": [[6, "module-cspsat.util"]], "cspsat\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8": [[7, "cspsat"]], "\u76ee\u6b21:": [[7, null]], "\u76ee\u6b21": [[7, "id1"]], "cspsat": [[8, "cspsat"]]}, "indexentries": {"cspsat": [[0, "module-cspsat"]], "module": [[0, "module-cspsat"], [1, "module-cspsat.csp"], [2, "module-cspsat.dpll"], [3, "module-cspsat.functions"], [4, "module-cspsat.hooks"], [5, "module-cspsat.sat"], [6, "module-cspsat.util"]], "directencoder (cspsat.csp \u306e\u30af\u30e9\u30b9)": [[1, "cspsat.csp.DirectEncoder"]], "encoder (cspsat.csp \u306e\u30af\u30e9\u30b9)": [[1, "cspsat.csp.Encoder"]], "logencoder (cspsat.csp \u306e\u30af\u30e9\u30b9)": [[1, "cspsat.csp.LogEncoder"]], "orderencoder (cspsat.csp \u306e\u30af\u30e9\u30b9)": [[1, "cspsat.csp.OrderEncoder"]], "solver (cspsat.csp \u306e\u30af\u30e9\u30b9)": [[1, "cspsat.csp.Solver"]], "add() (cspsat.csp.solver \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.Solver.add"]], "cspsat.csp": [[1, "module-cspsat.csp"]], "decode() (cspsat.csp.directencoder \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.DirectEncoder.decode"]], "decode() (cspsat.csp.encoder \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.Encoder.decode"]], "decode() (cspsat.csp.logencoder \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.LogEncoder.decode"]], "decode() (cspsat.csp.orderencoder \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.OrderEncoder.decode"]], "defint() (cspsat.csp.encoder \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.Encoder.defInt"]], "defaultconstrainthooks (cspsat.csp.encoder \u306e\u5c5e\u6027)": [[1, "cspsat.csp.Encoder.defaultConstraintHooks"]], "defaultfunctionhooks (cspsat.csp.encoder \u306e\u5c5e\u6027)": [[1, "cspsat.csp.Encoder.defaultFunctionHooks"]], "delimbit (cspsat.csp.encoder \u306e\u5c5e\u6027)": [[1, "cspsat.csp.Encoder.delimBit"]], "delimeq (cspsat.csp.encoder \u306e\u5c5e\u6027)": [[1, "cspsat.csp.Encoder.delimEq"]], "delimge (cspsat.csp.encoder \u306e\u5c5e\u6027)": [[1, "cspsat.csp.Encoder.delimGe"]], "encode() (cspsat.csp.encoder \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.Encoder.encode"]], "encodeint() (cspsat.csp.directencoder \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.DirectEncoder.encodeInt"]], "encodeint() (cspsat.csp.encoder \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.Encoder.encodeInt"]], "encodeint() (cspsat.csp.logencoder \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.LogEncoder.encodeInt"]], "encodeint() (cspsat.csp.orderencoder \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.OrderEncoder.encodeInt"]], "encodewsumeq0() (cspsat.csp.directencoder \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.DirectEncoder.encodeWsumEq0"]], "encodewsumeq0() (cspsat.csp.encoder \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.Encoder.encodeWsumEq0"]], "encodewsumeq0() (cspsat.csp.logencoder \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.LogEncoder.encodeWsumEq0"]], "encodewsumeq0() (cspsat.csp.orderencoder \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.OrderEncoder.encodeWsumEq0"]], "encodewsumle0() (cspsat.csp.directencoder \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.DirectEncoder.encodeWsumLe0"]], "encodewsumle0() (cspsat.csp.encoder \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.Encoder.encodeWsumLe0"]], "encodewsumle0() (cspsat.csp.logencoder \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.LogEncoder.encodeWsumLe0"]], "encodewsumle0() (cspsat.csp.orderencoder \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.OrderEncoder.encodeWsumLe0"]], "encodewsumne0() (cspsat.csp.directencoder \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.DirectEncoder.encodeWsumNe0"]], "encodewsumne0() (cspsat.csp.encoder \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.Encoder.encodeWsumNe0"]], "encodewsumne0() (cspsat.csp.logencoder \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.LogEncoder.encodeWsumNe0"]], "encodewsumne0() (cspsat.csp.orderencoder \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.OrderEncoder.encodeWsumNe0"]], "find() (cspsat.csp.solver \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.Solver.find"]], "getblock() (cspsat.csp.directencoder \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.DirectEncoder.getBlock"]], "getblock() (cspsat.csp.encoder \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.Encoder.getBlock"]], "getblock() (cspsat.csp.logencoder \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.LogEncoder.getBlock"]], "getblock() (cspsat.csp.orderencoder \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.OrderEncoder.getBlock"]], "getbools() (cspsat.csp.logencoder \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.LogEncoder.getBools"]], "getbound() (cspsat.csp.encoder \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.Encoder.getBound"]], "getstat() (cspsat.csp.solver \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.Solver.getStat"]], "intlb() (cspsat.csp.encoder \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.Encoder.intLb"]], "intrange() (cspsat.csp.encoder \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.Encoder.intRange"]], "intub() (cspsat.csp.encoder \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.Encoder.intUb"]], "isboollike() (cspsat.csp.encoder \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.Encoder.isBoolLike"]], "maximize (cspsat.csp.solver \u306e\u5c5e\u6027)": [[1, "cspsat.csp.Solver.maximize"]], "minimize (cspsat.csp.solver \u306e\u5c5e\u6027)": [[1, "cspsat.csp.Solver.minimize"]], "model (cspsat.csp.solver \u306e\u5c5e\u6027)": [[1, "cspsat.csp.Solver.model"]], "put() (cspsat.csp.encoder \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.Encoder.put"]], "solutions() (cspsat.csp.solver \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.Solver.solutions"]], "solve() (cspsat.csp.solver \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.Solver.solve"]], "stats (cspsat.csp.solver \u306e\u5c5e\u6027)": [[1, "cspsat.csp.Solver.stats"]], "tocnf() (cspsat.csp.encoder \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.Encoder.toCNF"]], "varbitk() (cspsat.csp.logencoder \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.LogEncoder.varBitK"]], "vareqk() (cspsat.csp.encoder \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.Encoder.varEqK"]], "vareqk() (cspsat.csp.logencoder \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.LogEncoder.varEqK"]], "vargek() (cspsat.csp.orderencoder \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.OrderEncoder.varGeK"]], "vartobool() (cspsat.csp.directencoder \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.DirectEncoder.varToBool"]], "vartobool() (cspsat.csp.encoder \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.Encoder.varToBool"]], "vartobool() (cspsat.csp.logencoder \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.LogEncoder.varToBool"]], "vartobool() (cspsat.csp.orderencoder \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.OrderEncoder.varToBool"]], "variables() (cspsat.csp.encoder \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.Encoder.variables"]], "wsumbound() (cspsat.csp.encoder \u306e\u30e1\u30bd\u30c3\u30c9)": [[1, "cspsat.csp.Encoder.wsumBound"]], "dpll (cspsat.dpll \u306e\u30af\u30e9\u30b9)": [[2, "cspsat.dpll.DPLL"]], "add() (cspsat.dpll.dpll \u306e\u30e1\u30bd\u30c3\u30c9)": [[2, "cspsat.dpll.DPLL.add"]], "addclause() (cspsat.dpll.dpll \u306e\u30e1\u30bd\u30c3\u30c9)": [[2, "cspsat.dpll.DPLL.addClause"]], "adddimacsclause() (cspsat.dpll.dpll \u306e\u30e1\u30bd\u30c3\u30c9)": [[2, "cspsat.dpll.DPLL.addDimacsClause"]], "addinternalclause() (cspsat.dpll.dpll \u306e\u30e1\u30bd\u30c3\u30c9)": [[2, "cspsat.dpll.DPLL.addInternalClause"]], "assigns2repr() (cspsat.dpll.dpll \u306e\u30e1\u30bd\u30c3\u30c9)": [[2, "cspsat.dpll.DPLL.assigns2repr"]], "assume() (cspsat.dpll.dpll \u306e\u30e1\u30bd\u30c3\u30c9)": [[2, "cspsat.dpll.DPLL.assume"]], "backtrack() (cspsat.dpll.dpll \u306e\u30e1\u30bd\u30c3\u30c9)": [[2, "cspsat.dpll.DPLL.backtrack"]], "cancel() (cspsat.dpll.dpll \u306e\u30e1\u30bd\u30c3\u30c9)": [[2, "cspsat.dpll.DPLL.cancel"]], "canceluntil() (cspsat.dpll.dpll \u306e\u30e1\u30bd\u30c3\u30c9)": [[2, "cspsat.dpll.DPLL.cancelUntil"]], "clause2repr() (cspsat.dpll.dpll \u306e\u30e1\u30bd\u30c3\u30c9)": [[2, "cspsat.dpll.DPLL.clause2repr"]], "cspsat.dpll": [[2, "module-cspsat.dpll"]], "decisionlevel() (cspsat.dpll.dpll \u306e\u30e1\u30bd\u30c3\u30c9)": [[2, "cspsat.dpll.DPLL.decisionLevel"]], "decisions2repr() (cspsat.dpll.dpll \u306e\u30e1\u30bd\u30c3\u30c9)": [[2, "cspsat.dpll.DPLL.decisions2repr"]], "enqueue() (cspsat.dpll.dpll \u306e\u30e1\u30bd\u30c3\u30c9)": [[2, "cspsat.dpll.DPLL.enqueue"]], "getmodel() (cspsat.dpll.dpll \u306e\u30e1\u30bd\u30c3\u30c9)": [[2, "cspsat.dpll.DPLL.getModel"]], "getstat() (cspsat.dpll.dpll \u306e\u30e1\u30bd\u30c3\u30c9)": [[2, "cspsat.dpll.DPLL.getStat"]], "info() (cspsat.dpll.dpll \u306e\u30e1\u30bd\u30c3\u30c9)": [[2, "cspsat.dpll.DPLL.info"]], "lit2repr() (cspsat.dpll.dpll \u306e\u30e1\u30bd\u30c3\u30c9)": [[2, "cspsat.dpll.DPLL.lit2repr"]], "load() (cspsat.dpll.dpll \u306e\u30e1\u30bd\u30c3\u30c9)": [[2, "cspsat.dpll.DPLL.load"]], "nclauses() (cspsat.dpll.dpll \u306e\u30e1\u30bd\u30c3\u30c9)": [[2, "cspsat.dpll.DPLL.nClauses"]], "nvars() (cspsat.dpll.dpll \u306e\u30e1\u30bd\u30c3\u30c9)": [[2, "cspsat.dpll.DPLL.nVars"]], "newdecision() (cspsat.dpll.dpll \u306e\u30e1\u30bd\u30c3\u30c9)": [[2, "cspsat.dpll.DPLL.newDecision"]], "newvar() (cspsat.dpll.dpll \u306e\u30e1\u30bd\u30c3\u30c9)": [[2, "cspsat.dpll.DPLL.newVar"]], "propagate() (cspsat.dpll.dpll \u306e\u30e1\u30bd\u30c3\u30c9)": [[2, "cspsat.dpll.DPLL.propagate"]], "propagateclause() (cspsat.dpll.dpll \u306e\u30e1\u30bd\u30c3\u30c9)": [[2, "cspsat.dpll.DPLL.propagateClause"]], "search() (cspsat.dpll.dpll \u306e\u30e1\u30bd\u30c3\u30c9)": [[2, "cspsat.dpll.DPLL.search"]], "solutions() (cspsat.dpll.dpll \u306e\u30e1\u30bd\u30c3\u30c9)": [[2, "cspsat.dpll.DPLL.solutions"]], "solve() (cspsat.dpll.dpll \u306e\u30e1\u30bd\u30c3\u30c9)": [[2, "cspsat.dpll.DPLL.solve"]], "todimacslit() (cspsat.dpll.dpll \u306e\u30e1\u30bd\u30c3\u30c9)": [[2, "cspsat.dpll.DPLL.toDimacsLit"]], "todimacslits() (cspsat.dpll.dpll \u306e\u30e1\u30bd\u30c3\u30c9)": [[2, "cspsat.dpll.DPLL.toDimacsLits"]], "tolit() (cspsat.dpll.dpll \u306e\u30e1\u30bd\u30c3\u30c9)": [[2, "cspsat.dpll.DPLL.toLit"]], "tovar() (cspsat.dpll.dpll \u306e\u30e1\u30bd\u30c3\u30c9)": [[2, "cspsat.dpll.DPLL.toVar"]], "value() (cspsat.dpll.dpll \u306e\u30e1\u30bd\u30c3\u30c9)": [[2, "cspsat.dpll.DPLL.value"]], "var2repr() (cspsat.dpll.dpll \u306e\u30e1\u30bd\u30c3\u30c9)": [[2, "cspsat.dpll.DPLL.var2repr"]], "watches2repr() (cspsat.dpll.dpll \u306e\u30e1\u30bd\u30c3\u30c9)": [[2, "cspsat.dpll.DPLL.watches2repr"]], "assignments() (cspsat.functions \u30e2\u30b8\u30e5\u30fc\u30eb)": [[3, "cspsat.functions.assignments"]], "cspsat.functions": [[3, "module-cspsat.functions"]], "defaulttimeout (cspsat.functions \u30e2\u30b8\u30e5\u30fc\u30eb)": [[3, "cspsat.functions.defaultTimeout"]], "eq1() (cspsat.functions \u30e2\u30b8\u30e5\u30fc\u30eb)": [[3, "cspsat.functions.eq1"]], "eqk() (cspsat.functions \u30e2\u30b8\u30e5\u30fc\u30eb)": [[3, "cspsat.functions.eqK"]], "ge1() (cspsat.functions \u30e2\u30b8\u30e5\u30fc\u30eb)": [[3, "cspsat.functions.ge1"]], "gek() (cspsat.functions \u30e2\u30b8\u30e5\u30fc\u30eb)": [[3, "cspsat.functions.geK"]], "gettimeout() (cspsat.functions \u30e2\u30b8\u30e5\u30fc\u30eb)": [[3, "cspsat.functions.getTimeout"]], "isequiv() (cspsat.functions \u30e2\u30b8\u30e5\u30fc\u30eb)": [[3, "cspsat.functions.isEquiv"]], "issat() (cspsat.functions \u30e2\u30b8\u30e5\u30fc\u30eb)": [[3, "cspsat.functions.isSat"]], "isvalid() (cspsat.functions \u30e2\u30b8\u30e5\u30fc\u30eb)": [[3, "cspsat.functions.isValid"]], "le1() (cspsat.functions \u30e2\u30b8\u30e5\u30fc\u30eb)": [[3, "cspsat.functions.le1"]], "lek() (cspsat.functions \u30e2\u30b8\u30e5\u30fc\u30eb)": [[3, "cspsat.functions.leK"]], "loadcsp() (cspsat.functions \u30e2\u30b8\u30e5\u30fc\u30eb)": [[3, "cspsat.functions.loadCSP"]], "loadsat() (cspsat.functions \u30e2\u30b8\u30e5\u30fc\u30eb)": [[3, "cspsat.functions.loadSAT"]], "models() (cspsat.functions \u30e2\u30b8\u30e5\u30fc\u30eb)": [[3, "cspsat.functions.models"]], "savecsp() (cspsat.functions \u30e2\u30b8\u30e5\u30fc\u30eb)": [[3, "cspsat.functions.saveCSP"]], "savedimacs() (cspsat.functions \u30e2\u30b8\u30e5\u30fc\u30eb)": [[3, "cspsat.functions.saveDimacs"]], "savesat() (cspsat.functions \u30e2\u30b8\u30e5\u30fc\u30eb)": [[3, "cspsat.functions.saveSAT"]], "settimeout() (cspsat.functions \u30e2\u30b8\u30e5\u30fc\u30eb)": [[3, "cspsat.functions.setTimeout"]], "solutionscsp() (cspsat.functions \u30e2\u30b8\u30e5\u30fc\u30eb)": [[3, "cspsat.functions.solutionsCSP"]], "solutionssat() (cspsat.functions \u30e2\u30b8\u30e5\u30fc\u30eb)": [[3, "cspsat.functions.solutionsSAT"]], "solvecsp() (cspsat.functions \u30e2\u30b8\u30e5\u30fc\u30eb)": [[3, "cspsat.functions.solveCSP"]], "solvesat() (cspsat.functions \u30e2\u30b8\u30e5\u30fc\u30eb)": [[3, "cspsat.functions.solveSAT"]], "statdata (cspsat.functions \u30e2\u30b8\u30e5\u30fc\u30eb)": [[3, "cspsat.functions.statData"]], "status() (cspsat.functions \u30e2\u30b8\u30e5\u30fc\u30eb)": [[3, "cspsat.functions.status"]], "tocnf() (cspsat.functions \u30e2\u30b8\u30e5\u30fc\u30eb)": [[3, "cspsat.functions.toCNF"]], "todnf() (cspsat.functions \u30e2\u30b8\u30e5\u30fc\u30eb)": [[3, "cspsat.functions.toDNF"]], "tonf() (cspsat.functions \u30e2\u30b8\u30e5\u30fc\u30eb)": [[3, "cspsat.functions.toNF"]], "tonnf() (cspsat.functions \u30e2\u30b8\u30e5\u30fc\u30eb)": [[3, "cspsat.functions.toNNF"]], "truthtable() (cspsat.functions \u30e2\u30b8\u30e5\u30fc\u30eb)": [[3, "cspsat.functions.truthTable"]], "value() (cspsat.functions \u30e2\u30b8\u30e5\u30fc\u30eb)": [[3, "cspsat.functions.value"]], "variables() (cspsat.functions \u30e2\u30b8\u30e5\u30fc\u30eb)": [[3, "cspsat.functions.variables"]], "cspsat.hooks": [[4, "module-cspsat.hooks"]], "defaultconstrainthook() (cspsat.hooks \u30e2\u30b8\u30e5\u30fc\u30eb)": [[4, "cspsat.hooks.defaultConstraintHook"]], "defaultfunctionhook() (cspsat.hooks \u30e2\u30b8\u30e5\u30fc\u30eb)": [[4, "cspsat.hooks.defaultFunctionHook"]], "sat (cspsat.sat \u306e\u30af\u30e9\u30b9)": [[5, "cspsat.sat.SAT"]], "add() (cspsat.sat.sat \u306e\u30e1\u30bd\u30c3\u30c9)": [[5, "cspsat.sat.SAT.add"]], "addblock() (cspsat.sat.sat \u306e\u30e1\u30bd\u30c3\u30c9)": [[5, "cspsat.sat.SAT.addBlock"]], "buflimit (cspsat.sat.sat \u306e\u5c5e\u6027)": [[5, "cspsat.sat.SAT.bufLimit"]], "buffer (cspsat.sat.sat \u306e\u5c5e\u6027)": [[5, "cspsat.sat.SAT.buffer"]], "cancel() (cspsat.sat.sat \u306e\u30e1\u30bd\u30c3\u30c9)": [[5, "cspsat.sat.SAT.cancel"]], "commit() (cspsat.sat.sat \u306e\u30e1\u30bd\u30c3\u30c9)": [[5, "cspsat.sat.SAT.commit"]], "commitposition (cspsat.sat.sat \u306e\u5c5e\u6027)": [[5, "cspsat.sat.SAT.commitPosition"]], "cspsat.sat": [[5, "module-cspsat.sat"]], "defaultcommand (cspsat.sat.sat \u306e\u5c5e\u6027)": [[5, "cspsat.sat.SAT.defaultCommand"]], "defaultlimit (cspsat.sat.sat \u306e\u5c5e\u6027)": [[5, "cspsat.sat.SAT.defaultLimit"]], "defaultmaxclauses (cspsat.sat.sat \u306e\u5c5e\u6027)": [[5, "cspsat.sat.SAT.defaultMaxClauses"]], "defaulttempdir (cspsat.sat.sat \u306e\u5c5e\u6027)": [[5, "cspsat.sat.SAT.defaultTempdir"]], "find() (cspsat.sat.sat \u306e\u30e1\u30bd\u30c3\u30c9)": [[5, "cspsat.sat.SAT.find"]], "getstat() (cspsat.sat.sat \u306e\u30e1\u30bd\u30c3\u30c9)": [[5, "cspsat.sat.SAT.getStat"]], "model (cspsat.sat.sat \u306e\u5c5e\u6027)": [[5, "cspsat.sat.SAT.model"]], "nclauses() (cspsat.sat.sat \u306e\u30e1\u30bd\u30c3\u30c9)": [[5, "cspsat.sat.SAT.nClauses"]], "nvars() (cspsat.sat.sat \u306e\u30e1\u30bd\u30c3\u30c9)": [[5, "cspsat.sat.SAT.nVars"]], "nclauses (cspsat.sat.sat \u306e\u5c5e\u6027)": [[5, "cspsat.sat.SAT.nclauses"]], "solutions() (cspsat.sat.sat \u306e\u30e1\u30bd\u30c3\u30c9)": [[5, "cspsat.sat.SAT.solutions"]], "solve() (cspsat.sat.sat \u306e\u30e1\u30bd\u30c3\u30c9)": [[5, "cspsat.sat.SAT.solve"]], "stats (cspsat.sat.sat \u306e\u5c5e\u6027)": [[5, "cspsat.sat.SAT.stats"]], "updatedimacsheader() (cspsat.sat.sat \u306e\u30e1\u30bd\u30c3\u30c9)": [[5, "cspsat.sat.SAT.updateDimacsHeader"]], "variables (cspsat.sat.sat \u306e\u5c5e\u6027)": [[5, "cspsat.sat.SAT.variables"]], "binary (cspsat.util \u306e\u30af\u30e9\u30b9)": [[6, "cspsat.util.Binary"]], "binaryequation (cspsat.util \u306e\u30af\u30e9\u30b9)": [[6, "cspsat.util.BinaryEquation"]], "bool (cspsat.util \u306e\u30af\u30e9\u30b9)": [[6, "cspsat.util.Bool"]], "cspsatexception": [[6, "cspsat.util.CspsatException"]], "cspsattimeout": [[6, "cspsat.util.CspsatTimeout"]], "false (cspsat.util \u30e2\u30b8\u30e5\u30fc\u30eb)": [[6, "cspsat.util.FALSE"]], "preprocessor (cspsat.util \u306e\u30af\u30e9\u30b9)": [[6, "cspsat.util.Preprocessor"]], "seqcounter (cspsat.util \u306e\u30af\u30e9\u30b9)": [[6, "cspsat.util.SeqCounter"]], "true (cspsat.util \u30e2\u30b8\u30e5\u30fc\u30eb)": [[6, "cspsat.util.TRUE"]], "var (cspsat.util \u306e\u30af\u30e9\u30b9)": [[6, "cspsat.util.Var"]], "wsum (cspsat.util \u306e\u30af\u30e9\u30b9)": [[6, "cspsat.util.Wsum"]], "add() (cspsat.util.binary \u306e\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.Binary.add"]], "add() (cspsat.util.binaryequation \u306e\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.BinaryEquation.add"]], "add() (cspsat.util.wsum \u306e\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.Wsum.add"]], "addmul() (cspsat.util.binary \u306e\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.Binary.addMul"]], "addmul() (cspsat.util.binaryequation \u306e\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.BinaryEquation.addMul"]], "addnum() (cspsat.util.binary \u306e\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.Binary.addNum"]], "addnum() (cspsat.util.binaryequation \u306e\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.BinaryEquation.addNum"]], "addpower() (cspsat.util.binary \u306e\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.Binary.addPower"]], "addpower() (cspsat.util.binaryequation \u306e\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.BinaryEquation.addPower"]], "bins (cspsat.util.binary \u306e\u5c5e\u6027)": [[6, "cspsat.util.Binary.bins"]], "c (cspsat.util.wsum \u306e\u5c5e\u6027)": [[6, "cspsat.util.Wsum.c"]], "cmp0() (cspsat.util.binaryequation \u306e\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.BinaryEquation.cmp0"]], "coef() (cspsat.util.wsum \u306e\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.Wsum.coef"]], "cspsat.util": [[6, "module-cspsat.util"]], "eq() (cspsat.util.binary \u306e\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.Binary.eq"]], "eqk() (cspsat.util.binary \u306e\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.Binary.eqK"]], "eqk() (cspsat.util.seqcounter \u306e\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.SeqCounter.eqK"]], "ge() (cspsat.util.binary \u306e\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.Binary.ge"]], "gek() (cspsat.util.binary \u306e\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.Binary.geK"]], "gek() (cspsat.util.seqcounter \u306e\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.SeqCounter.geK"]], "gt() (cspsat.util.binary \u306e\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.Binary.gt"]], "gtk() (cspsat.util.binary \u306e\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.Binary.gtK"]], "gtk() (cspsat.util.seqcounter \u306e\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.SeqCounter.gtK"]], "isaux() (cspsat.util.bool \u306e\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.Bool.isAux"]], "isaux() (cspsat.util.var \u306e\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.Var.isAux"]], "isbc() (cspsat.util.preprocessor \u306e\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.Preprocessor.isBC"]], "isconstant() (cspsat.util.wsum \u306e\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.Wsum.isConstant"]], "issimpleseq() (cspsat.util.binary \u306e\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.Binary.isSimpleSeq"]], "le() (cspsat.util.binary \u306e\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.Binary.le"]], "lek() (cspsat.util.binary \u306e\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.Binary.leK"]], "lek() (cspsat.util.seqcounter \u306e\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.SeqCounter.leK"]], "lt() (cspsat.util.binary \u306e\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.Binary.lt"]], "ltk() (cspsat.util.binary \u306e\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.Binary.ltK"]], "ltk() (cspsat.util.seqcounter \u306e\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.SeqCounter.ltK"]], "mul() (cspsat.util.wsum \u306e\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.Wsum.mul"]], "ne() (cspsat.util.binary \u306e\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.Binary.ne"]], "nek() (cspsat.util.binary \u306e\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.Binary.neK"]], "nek() (cspsat.util.seqcounter \u306e\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.SeqCounter.neK"]], "neg() (cspsat.util.wsum \u306e\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.Wsum.neg"]], "put() (cspsat.util.binary \u306e\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.Binary.put"]], "sub() (cspsat.util.wsum \u306e\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.Wsum.sub"]], "tobc() (cspsat.util.preprocessor \u306e\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.Preprocessor.toBC"]], "tobchain() (cspsat.util.binary \u306e\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.Binary.toBchain"]], "tocnf() (cspsat.util.binary \u306e\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.Binary.toCNF"]], "toexpr() (cspsat.util.wsum \u306e\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.Wsum.toExpr"]], "tosimpleseq() (cspsat.util.binary \u306e\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.Binary.toSimpleSeq"]], "towsum() (cspsat.util.preprocessor \u306e\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.Preprocessor.toWsum"]], "toxcnf() (cspsat.util.preprocessor \u306e\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.Preprocessor.toXCNF"]], "value() (cspsat.util.wsum \u306e\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.Wsum.value"]], "variables() (cspsat.util.wsum \u306e\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.Wsum.variables"]], "where() (cspsat.util.wsum \u306e\u30e1\u30bd\u30c3\u30c9)": [[6, "cspsat.util.Wsum.where"]], "wsum (cspsat.util.wsum \u306e\u5c5e\u6027)": [[6, "cspsat.util.Wsum.wsum"]]}})